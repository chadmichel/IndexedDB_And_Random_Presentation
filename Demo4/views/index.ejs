<!DOCTYPE html>
<html>



<body>

<div id="qunit"></div>
<div id="qunit-fixture"></div>

<script src="libs/jquery.js"></script>
<link rel="stylesheet" href="libs/qunit.css">
<script src="libs/jqunit.js"></script>

<script src="javascripts/guid.js"></script>  

<script>

// From: https://developer.mozilla.org/en-US/docs/IndexedDB/Using_IndexedDB
// In the following line, you should include the prefixes of implementations you want to test.
window.indexedDB = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
// DON'T use "var indexedDB = ..." if you're not in a function.
// Moreover, you may need references to some window.IDB* objects:
window.IDBTransaction = window.IDBTransaction || window.webkitIDBTransaction || window.msIDBTransaction;
window.IDBKeyRange = window.IDBKeyRange || window.webkitIDBKeyRange || window.msIDBKeyRange
// (Mozilla has never prefixed these objects, so we don't need window.mozIDB*)

if (!window.indexedDB) {
    window.alert("Your browser doesn't support a stable version of IndexedDB. Such and such feature will not be available.")
}

function open(ready) {	

    var request = window.indexedDB.open("Demo4", 1);      
	var db = null;
            
    request.onupgradeneeded = function(event) {
    
		db = event.target.result;
    
        if (event.oldVersion <= 1) {
				                                        
            var notesStore = db.createObjectStore("notes", { keyPath: "id" });
            notesStore.createIndex("date", "date", { unique: false });
        }
   
    };
        
    request.onerror = function(event) {
        // Do something with request.errorCode!
        alert(event);
    };
    request.onsuccess = function(event) {
        // Do something with request.result!
        ready(db);            
    };
    
}

function put(db, note, callback) {
    var tx = db.transaction("notes", "readwrite");
    var store = tx.objectStore("notes");
    var req = store.put(note);
            
    if (callback !== null) {
        req.onsuccess = function(event) {
            callback();
        }
        req.onerror = function(event) {
            callback(event);
        }
    }
};

// lets test this...
asyncTest(" open database ", function() {
	open(function(db) {
		var id = UUID.generate();
		put(db, {id: id, title: "a title", date: new Date()}, function() {
			start();			
		});
	});
	expect(0);
});

</script>

</body>


</html>
